// Generated by Neat
//
// This file has been generated
// Do not modify by hand

part of 'dimensions.dart';

// **************************************************************************
// GlobalGenerator
// **************************************************************************

const right = 0x1000;
const left = 0x0100;
const top = 0x0010;
const bottom = 0x0001;

class PaddingSmall extends EdgeInsets {
  const PaddingSmall([int padding = left | right | top | bottom])
      : super.only(
          left: padding & left == left ? 21 : 0,
          right: padding & right == right ? 21 : 0,
          top: padding & top == top ? 21 : 0,
          bottom: padding & bottom == bottom ? 21 : 0,
        );

  const PaddingSmall.all() : super.all(21);

  const PaddingSmall.left() : super.only(left: 21);

  const PaddingSmall.right() : super.only(right: 21);

  const PaddingSmall.top() : super.only(top: 21);

  const PaddingSmall.bottom() : super.only(bottom: 21);

  const PaddingSmall.only(
      {bool left = false,
      bool right = false,
      bool top = false,
      bool bottom = false})
      : super.only(
          left: left ? 21 : 0,
          right: right ? 21 : 0,
          top: top ? 21 : 0,
          bottom: bottom ? 21 : 0,
        );

  const PaddingSmall.horizontal()
      : super.symmetric(horizontal: 21, vertical: 0);

  const PaddingSmall.vertical() : super.symmetric(vertical: 21, horizontal: 0);

  const PaddingSmall.symmetric({bool horizontal = false, bool vertical = false})
      : super.symmetric(
            horizontal: horizontal ? 21 : 0, vertical: vertical ? 21 : 0);
}

class PaddingMedium extends EdgeInsets {
  const PaddingMedium([int padding = left | right | top | bottom])
      : super.only(
          left: padding & left == left ? 34 : 0,
          right: padding & right == right ? 34 : 0,
          top: padding & top == top ? 34 : 0,
          bottom: padding & bottom == bottom ? 34 : 0,
        );

  const PaddingMedium.all() : super.all(34);

  const PaddingMedium.left() : super.only(left: 34);

  const PaddingMedium.right() : super.only(right: 34);

  const PaddingMedium.top() : super.only(top: 34);

  const PaddingMedium.bottom() : super.only(bottom: 34);

  const PaddingMedium.only(
      {bool left = false,
      bool right = false,
      bool top = false,
      bool bottom = false})
      : super.only(
          left: left ? 34 : 0,
          right: right ? 34 : 0,
          top: top ? 34 : 0,
          bottom: bottom ? 34 : 0,
        );

  const PaddingMedium.horizontal()
      : super.symmetric(horizontal: 34, vertical: 0);

  const PaddingMedium.vertical() : super.symmetric(vertical: 34, horizontal: 0);

  const PaddingMedium.symmetric(
      {bool horizontal = false, bool vertical = false})
      : super.symmetric(
            horizontal: horizontal ? 34 : 0, vertical: vertical ? 34 : 0);
}

class PaddingBig extends EdgeInsets {
  const PaddingBig([int padding = left | right | top | bottom])
      : super.only(
          left: padding & left == left ? 55 : 0,
          right: padding & right == right ? 55 : 0,
          top: padding & top == top ? 55 : 0,
          bottom: padding & bottom == bottom ? 55 : 0,
        );

  const PaddingBig.all() : super.all(55);

  const PaddingBig.left() : super.only(left: 55);

  const PaddingBig.right() : super.only(right: 55);

  const PaddingBig.top() : super.only(top: 55);

  const PaddingBig.bottom() : super.only(bottom: 55);

  const PaddingBig.only(
      {bool left = false,
      bool right = false,
      bool top = false,
      bool bottom = false})
      : super.only(
          left: left ? 55 : 0,
          right: right ? 55 : 0,
          top: top ? 55 : 0,
          bottom: bottom ? 55 : 0,
        );

  const PaddingBig.horizontal() : super.symmetric(horizontal: 55, vertical: 0);

  const PaddingBig.vertical() : super.symmetric(vertical: 55, horizontal: 0);

  const PaddingBig.symmetric({bool horizontal = false, bool vertical = false})
      : super.symmetric(
            horizontal: horizontal ? 55 : 0, vertical: vertical ? 55 : 0);
}

class SpaceSmall extends SizedBox {
  const SpaceSmall({Key? key})
      : super(
          height: 21,
          width: 21,
          key: key,
        );

  const SpaceSmall.w({Key? key})
      : super(
          height: 0,
          width: 21,
          key: key,
        );

  const SpaceSmall.h({Key? key})
      : super(
          height: 21,
          width: 0,
          key: key,
        );
}

class SpaceMedium extends SizedBox {
  const SpaceMedium({Key? key})
      : super(
          height: 34,
          width: 34,
          key: key,
        );

  const SpaceMedium.w({Key? key})
      : super(
          height: 0,
          width: 34,
          key: key,
        );

  const SpaceMedium.h({Key? key})
      : super(
          height: 34,
          width: 0,
          key: key,
        );
}

class SpaceBig extends SizedBox {
  const SpaceBig({Key? key})
      : super(
          height: 55,
          width: 55,
          key: key,
        );

  const SpaceBig.w({Key? key})
      : super(
          height: 0,
          width: 55,
          key: key,
        );

  const SpaceBig.h({Key? key})
      : super(
          height: 55,
          width: 0,
          key: key,
        );
}
